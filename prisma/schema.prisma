// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" 
  url      = "file:./dev.db"
}

model Users {
  id        String  @id @default(cuid())
  avatarUrl String
  name      String
  email     String  @unique
  cpf       String  @unique
  password  String
  role      String
  phone     String  @unique
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Schedule        Schedule[]
  creatingConcept Concept[]  @relation("creator")
  Concept         Concept[]  @relation("student")

  SubjectClass SubjectClass[]

  Reports Report[]

  UsersReport UsersReport[]

  Studing Studying[]

  Teach Teach[]
}


model Concept {
  id         String   @id @default(cuid())

  av1        String?   // Conceito da AV1
  av2        String?   // Conceito da AV2

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  creatorId  String
  creator    Users?   @relation("creator", fields: [creatorId], references: [id])

  studentId  String
  student    Users?   @relation("student", fields: [studentId], references: [id])

  subjectId  String       // Chave estrangeira para Subject
  subject    Subject?      @relation(fields: [subjectId], references: [id])  
}


model Report {
  id          String @id @default(cuid())
  title       String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UsersReport UsersReport[]
  creator     Users         @relation(fields: [creatorId], references: [id])
  creatorId   String
}

model Class {
  id     String @id @default(cuid())
  title  String
  code   String @unique
  year   String
  period Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Schedule Schedule[]

  SubjectClass SubjectClass[]

  Studing Studying[]

  Teach Teach[]
}

model Subject {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  concepts   Concept[]   
  SubjectClass SubjectClass[]
}

model Schedule {
  id  String @id @default(cuid())
  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId String
  creator   Users? @relation(fields: [creatorId], references: [id])

  classId String
  class   Class? @relation(fields: [classId], references: [id])
}

model Studying {
  userId String
  user   Users? @relation(fields: [userId], references: [id])

  classId String
  class   Class? @relation(fields: [classId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, classId])
}

model Teach {
  userId String
  user   Users? @relation(fields: [userId], references: [id])

  classId String
  class   Class? @relation(fields: [classId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, classId])
}

model SubjectClass {
  userId String
  user   Users? @relation(fields: [userId], references: [id])

  classId String
  class   Class? @relation(fields: [classId], references: [id])

  subjectId String
  subject   Subject? @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, classId, subjectId])
  @@unique([userId, classId, subjectId])
}

model UsersReport {
  userId String
  user   Users? @relation(fields: [userId], references: [id])

  reportId String
  report   Report? @relation(fields: [reportId], references: [id])

  viewed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, reportId])
  @@unique([userId, reportId])
}
